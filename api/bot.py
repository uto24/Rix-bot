import os
import asyncio
import uuid
from flask import Flask, request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from supabase import create_client, Client
from datetime import datetime, timedelta, timezone
from dateutil.parser import parse

# --- ‡¶ß‡¶æ‡¶™ ‡ßß: ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® ---
TOKEN = os.environ.get("TELEGRAM_TOKEN")
SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY")
VERCEL_URL = os.environ.get("VERCEL_URL")


# --- ‡¶ß‡¶æ‡¶™ ‡ß®: ‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶® ---
# Vercel-‡¶è "Pool timeout" ‡¶è‡¶∞‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø timeout ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
bot = Bot(token=TOKEN, connect_timeout=10.0, read_timeout=10.0)
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
app = Flask(__name__)

# --- ‡¶ß‡¶æ‡¶™ ‡ß©: ‡¶ó‡ßá‡¶Æ‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü‡¶∏ ---
NEW_USER_BONUS = 2000
REFERRAL_BONUS = 1000
MINING_REWARD = 200
MINING_INTERVAL_HOURS = 6

# --- ‡¶ß‡¶æ‡¶™ ‡ß™: ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (Helper Functions) ---

def generate_referral_code():
    """‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡ßÆ-‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶ï‡ßã‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§"""
    return str(uuid.uuid4())[:8]

def update_rix_balance(user_id, amount_to_add):
    """‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡•§"""
    try:
        user_data = supabase.table('users').select('rix_balance').eq('user_id', user_id).single().execute()
        current_balance = user_data.data.get('rix_balance', 0) if user_data.data else 0
        new_balance = current_balance + amount_to_add
        supabase.table('users').update({'rix_balance': new_balance}).eq('user_id', user_id).execute()
    except Exception as e:
        print(f"‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (User ID: {user_id}): {e}")

def get_main_menu_keyboard():
    """‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§"""
    keyboard = [
        [InlineKeyboardButton("‚õèÔ∏è ‡¶Æ‡¶æ‡¶á‡¶®‡¶ø‡¶Ç ‡¶π‡¶æ‡¶¨", callback_data="mining_hub")],
        [InlineKeyboardButton("üí∞ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏", callback_data="check_balance")],
        [InlineKeyboardButton("ü§ù ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="refer_friend")]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- ‡¶ß‡¶æ‡¶™ ‡ß´: ‡¶Æ‡ßÇ‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï (‡¶¨‡¶ü ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá) ---

async def handle_update(update_data):
    """‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü (‡¶Æ‡ßá‡¶∏‡ßá‡¶ú, ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï) ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§"""
    update = Update.de_json(update_data, bot)
    
    # ‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶∏‡ßá
    if update.message and update.message.text:
        user = update.message.from_user
        chat_id = update.message.chat_id
        text = update.message.text
        
        if text.startswith('/start'):
            command_parts = text.split()
            referrer_id = None
            
            if len(command_parts) > 1:
                referral_code = command_parts[1]
                referrer_data = supabase.table('users').select('user_id').eq('referral_code', referral_code).single().execute()
                if referrer_data.data:
                    referrer_id = referrer_data.data['user_id']
            
            existing_user = supabase.table('users').select('user_id').eq('user_id', user.id).single().execute()

            if not existing_user.data:
                initial_balance = NEW_USER_BONUS
                
                if referrer_id and referrer_id != user.id:
                    update_rix_balance(referrer_id, REFERRAL_BONUS)
                    await bot.send_message(chat_id=referrer_id, text=f"üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! {user.first_name} ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶ø {REFERRAL_BONUS} RiX ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®!")
                
                supabase.table('users').insert({
                    'user_id': user.id, 'first_name': user.first_name, 
                    'referral_code': generate_referral_code(), 'rix_balance': initial_balance,
                    'referred_by': referrer_id
                }).execute()
                
                welcome_message = f"‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {user.first_name}! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá {NEW_USER_BONUS} RiX ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®!"
            else:
                welcome_message = f"‡¶´‡¶ø‡¶∞‡ßá ‡¶Ü‡¶∏‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶, {user.first_name}!"
            
            await bot.send_message(chat_id=chat_id, text=welcome_message, reply_markup=get_main_menu_keyboard())

    # ‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü
    elif update.callback_query:
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        back_button = [InlineKeyboardButton("‚¨ÖÔ∏è ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßÅ‡¶®", callback_data="back_to_menu")]

        if query.data == "check_balance":
            user_data = supabase.table('users').select('rix_balance').eq('user_id', user_id).single().execute()
            balance = user_data.data.get('rix_balance', 0) if user_data.data else 0
            await query.edit_message_text(text=f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® RiX ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {balance} üí∞", reply_markup=InlineKeyboardMarkup([back_button]))

        elif query.data == "mining_hub":
            user_data = supabase.table('users').select('last_mining_claim').eq('user_id', user_id).single().execute()
            last_claim_str = user_data.data.get('last_mining_claim') if user_data.data else None
            
            can_claim = False
            message = ""
            
            if not last_claim_str:
                can_claim = True
                message = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Æ‡¶æ‡¶á‡¶®‡¶ø‡¶Ç ‡¶∏‡ßá‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡ßç‡¶≤‡ßá‡¶á‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®!"
            else:
                last_claim_time = parse(last_claim_str)
                next_claim_time = last_claim_time + timedelta(hours=MINING_INTERVAL_HOURS)
                if datetime.now(timezone.utc) >= next_claim_time:
                    can_claim = True
                    message = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶á‡¶®‡¶ø‡¶Ç ‡¶∏‡ßá‡¶∂‡¶® ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§! ‡¶è‡¶ñ‡¶®‡¶ø ‡¶ï‡ßç‡¶≤‡ßá‡¶á‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
                else:
                    remaining = next_claim_time - datetime.now(timezone.utc)
                    hours, rem = divmod(remaining.seconds, 3600)
                    minutes, _ = divmod(rem, 60)
                    message = f"‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ï‡ßç‡¶≤‡ßá‡¶á‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n‡¶∏‡¶Æ‡ßü ‡¶¨‡¶æ‡¶ï‡¶ø: {hours} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ {minutes} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü"
            
            keyboard = []
            if can_claim:
                keyboard.append([InlineKeyboardButton(f"‚úÖ {MINING_REWARD} RiX ‡¶ï‡ßç‡¶≤‡ßá‡¶á‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="claim_reward")])
            keyboard.append(back_button)
            await query.edit_message_text(text=message, reply_markup=InlineKeyboardMarkup(keyboard))
        
        elif query.data == "claim_reward":
            update_rix_balance(user_id, MINING_REWARD)
            now_utc = datetime.now(timezone.utc).isoformat()
            supabase.table('users').update({'last_mining_claim': now_utc}).eq('user_id', user_id).execute()
            await query.edit_message_text(text=f"‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ü‡¶™‡¶®‡¶ø {MINING_REWARD} RiX ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§", reply_markup=InlineKeyboardMarkup([back_button]))
            
        elif query.data == "refer_friend":
            user_data = supabase.table('users').select('referral_code').eq('user_id', user_id).single().execute()
            ref_code = user_data.data.get('referral_code', 'N/A') if user_data.data else 'N/A'
            bot_username = (await bot.get_me()).username
            ref_link = f"https://t.me/{bot_username}?start={ref_code}"
            await query.edit_message_text(
                text=f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá RiX ‡¶Ü‡ßü ‡¶ï‡¶∞‡ßÅ‡¶®!\n\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï:\n`{ref_link}`",
                parse_mode='Markdown', reply_markup=InlineKeyboardMarkup([back_button])
            )

        elif query.data == "back_to_menu":
            await query.edit_message_text(text="‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ:", reply_markup=get_main_menu_keyboard())

# --- ‡¶ß‡¶æ‡¶™ ‡ß¨: Vercel ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø (‡¶Ü‡¶∞‡¶ì ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø) ---

# ‡¶è‡¶á ‡¶∞‡¶æ‡¶â‡¶ü‡¶ü‡¶ø ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá
@app.route('/', methods=['POST'])
def webhook_handler():
    """‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ POST ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá‡•§"""
    try:
        asyncio.run(handle_update(request.json))
    except Exception as e:
        print(f"Error in webhook_handler: {e}")
    return 'ok'

# ‡¶è‡¶á ‡¶∞‡¶æ‡¶â‡¶ü‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
@app.route('/setwebhook', methods=['GET'])
def set_webhook_route():
    """‡¶¨‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡•§"""
    try:
        # VERCEL_URL ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤‡¶ü‡¶ø ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®
        if not VERCEL_URL:
            return "Error: VERCEL_URL environment variable is not set.", 500
        
        webhook_url = f"https://{VERCEL_URL}/"
        
        # async ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßÅ‡¶™‡ßá ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        is_set = asyncio.run(bot.set_webhook(url=webhook_url, allowed_updates=['message', 'callback_query']))
        
        if is_set:
            return "Webhook ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!"
        else:
            return "Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ API ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶∏‡ßá‡¶®‡¶ø‡•§", 500
    except Exception as e:
        # ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶∞‡¶∞‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶≤‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡¶•‡ßç‡¶Ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®
        print(f"CRITICAL Error in set_webhook_route: {e}")
        return f"An internal error occurred while setting the webhook: {e}", 500
