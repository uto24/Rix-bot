import os
import asyncio
import uuid
import json
from flask import Flask, request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from supabase import create_client, Client
from datetime import datetime, timedelta, timezone
from dateutil.parser import parse
from urllib.parse import quote_plus

# --- ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡¶æ Vercel ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá ---
TOKEN = os.environ.get("TELEGRAM_TOKEN")
SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY")
VERCEL_URL = f"https://{os.environ.get('VERCEL_URL')}"

# --- ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ---
bot = Bot(token=TOKEN)
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
app = Flask(__name__)

# --- ‡¶ó‡ßá‡¶Æ‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ---
NEW_USER_BONUS = 2000
REFERRAL_BONUS = 1000
MINING_REWARD = 200
MINING_INTERVAL_HOURS = 6

# ... (generate_referral_code ‡¶è‡¶¨‡¶Ç update_rix_balance ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá) ...
def generate_referral_code(): return str(uuid.uuid4())[:8]
def update_rix_balance(user_id, amount_to_add):
    try:
        user_data = supabase.table('users').select('rix_balance').eq('user_id', user_id).single().execute()
        current_balance = user_data.data.get('rix_balance', 0)
        new_balance = current_balance + amount_to_add
        supabase.table('users').update({'rix_balance': new_balance}).eq('user_id', user_id).execute()
    except Exception as e: print(f"‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

# --- ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶¨‡¶æ‡¶ü‡¶® ---
def get_main_menu_keyboard():
    keyboard = [
        # ‡¶Æ‡¶ø‡¶®‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ñ‡ßã‡¶≤‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø web_app ‡¶¨‡¶æ‡¶ü‡¶®
        [InlineKeyboardButton("üíé ‡¶Æ‡¶æ‡¶á‡¶®‡¶ø‡¶Ç ‡¶π‡¶æ‡¶¨ (Mini App)", web_app={'url': VERCEL_URL})],
        [InlineKeyboardButton("ü§ù ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡ßü ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="refer_friend")]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
async def handle_update(update_data):
    update = Update.de_json(update_data, bot)
    
    if update.message and update.message.web_app_data:
        # ‡¶Æ‡¶ø‡¶®‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
        user = update.message.from_user
        web_app_data = json.loads(update.message.web_app_data.data)
        
        if web_app_data.get('action') == 'get_user_data':
            # ‡¶Æ‡¶ø‡¶®‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®
            user_db_data = supabase.table('users').select('*').eq('user_id', user.id).single().execute().data
            if user_db_data:
                last_claim_str = user_db_data.get('last_mining_claim')
                can_claim = False
                next_claim_in_seconds = 0
                
                if not last_claim_str:
                    can_claim = True
                else:
                    last_claim_time = parse(last_claim_str)
                    next_claim_time = last_claim_time + timedelta(hours=MINING_INTERVAL_HOURS)
                    now_utc = datetime.now(timezone.utc)
                    if now_utc >= next_claim_time:
                        can_claim = True
                    else:
                        next_claim_in_seconds = (next_claim_time - now_utc).total_seconds()

                response_to_frontend = {
                    'rix_balance': user_db_data.get('rix_balance', 0),
                    'can_claim': can_claim,
                    'next_claim_in_seconds': int(next_claim_in_seconds),
                    'mining_reward': MINING_REWARD
                }
                # ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ü‡¶ø ‡¶Æ‡¶ø‡¶®‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶™‡¶æ‡¶†‡¶æ‡¶®
                await bot.answer_web_app_query(update.message.web_app_data.query_id, json.dumps(response_to_frontend))

        elif web_app_data.get('action') == 'claim_from_mini_app':
            # ‡¶Æ‡¶ø‡¶®‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßç‡¶≤‡ßá‡¶á‡¶Æ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶è‡¶∏‡ßá‡¶õ‡ßá
            update_rix_balance(user.id, MINING_REWARD)
            now_utc = datetime.now(timezone.utc).isoformat()
            supabase.table('users').update({'last_mining_claim': now_utc}).eq('user_id', user.id).execute()
            await bot.send_message(chat_id=user.id, text=f"üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Æ‡¶ø‡¶®‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶•‡ßá‡¶ï‡ßá {MINING_REWARD} RiX ‡¶ï‡ßç‡¶≤‡ßá‡¶á‡¶Æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§")

    elif update.message and update.message.text and update.message.text.startswith('/start'):
        # ... (/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∂‡ßá‡¶∑‡ßá get_main_menu_keyboard() ‡¶ï‡¶≤ ‡¶π‡¶¨‡ßá) ...
        user = update.message.from_user
        # ... (‡¶¨‡¶æ‡¶ï‡¶ø ‡¶ï‡ßã‡¶° ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã) ...
        await bot.send_message(chat_id=user.id, text=welcome_message, reply_markup=get_main_menu_keyboard())


    elif update.callback_query:
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        if query.data == "refer_friend":
            # --- ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ---
            user_data = supabase.table('users').select('referral_code').eq('user_id', user_id).single().execute()
            ref_code = user_data.data.get('referral_code', 'N/A')
            bot_username = (await bot.get_me()).username
            ref_link = f"https://t.me/{bot_username}?start={ref_code}"
            
            share_text = f"‡¶¶‡¶æ‡¶∞‡ßÅ‡¶£ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ü ‡¶™‡ßá‡¶≤‡¶æ‡¶Æ! RiX Coin ‡¶Æ‡¶æ‡¶á‡¶®‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶™‡¶®‡¶ø‡¶ì {NEW_USER_BONUS} RiX ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶™‡¶æ‡¶®! üöÄ"
            encoded_text = quote_plus(share_text)
            share_url = f"https://t.me/share/url?url={ref_link}&text={encoded_text}"
            
            keyboard = [
                [InlineKeyboardButton("üì§ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®", url=share_url)],
                [InlineKeyboardButton("‚¨ÖÔ∏è ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßÅ‡¶®", callback_data="back_to_menu")]
            ]
            await query.edit_message_text(
                text=f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡ßü ‡¶ï‡¶∞‡ßÅ‡¶®!\n\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï:\n`{ref_link}`",
                parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif query.data == "back_to_menu":
            await query.edit_message_text(text="‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ:", reply_markup=get_main_menu_keyboard())

# --- Vercel ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡¶æ‡¶â‡¶ü (Route) ---
@app.route('/api/bot', methods=['POST'])
def webhook_handler():
    asyncio.run(handle_update(request.json))
    return 'ok'

# ‡¶è‡¶á ‡¶∞‡¶æ‡¶â‡¶ü‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á, ‡¶ï‡¶æ‡¶∞‡¶£ vercel.json ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∞‡ßÅ‡¶ü ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø‡¶ï‡ßá ‡¶´‡ßç‡¶∞‡¶®‡ßç‡¶ü‡¶è‡¶®‡ßç‡¶° ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
# @app.route('/', methods=['GET'])
# def index():
#     return "Bot is running..."

@app.route('/setwebhook', methods=['GET'])
def set_webhook():
    webhook_url = f"{VERCEL_URL}/api/bot" # Webhook URL ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá
    is_set = asyncio.run(bot.set_webhook(url=webhook_url))
    if is_set:
        return "Webhook ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!"
    return "Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§"
