# --- ржзрж╛ржк рзз: ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржорзНржкрзЛрж░рзНржЯ ---
import os
import uuid
from flask import Flask, request, Response, send_from_directory, jsonify
from flask_cors import CORS
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from supabase import create_client, Client
from datetime import datetime, timedelta, timezone
from dateutil.parser import parse

# --- ржзрж╛ржк рзи: ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржПржмржВ ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ ---
TOKEN = os.environ.get("TELEGRAM_TOKEN")
SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY")
# Render.com рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ RENDER_EXTERNAL_URL ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж╕рзЗржЯ ржХрж░рзЗ
RENDER_URL = os.environ.get("RENDER_EXTERNAL_URL") 
PORT = int(os.environ.get('PORT', 5000)) # Render-ржПрж░ ржЬржирзНржп ржкрзЛрж░рзНржЯ

bot = Bot(token=TOKEN)
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
# static_folder='frontend' ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржпрж╛рждрзЗ CSS/JS ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж╕рж╛рж░рзНржн рж╣ржпрж╝
app = Flask(__name__, static_folder='frontend')
CORS(app, resources={r"/api/*": {"origins": "*"}})

# --- ржзрж╛ржк рзй: ржЧрзЗржорзЗрж░ ржирж┐ржпрж╝ржо ---
NEW_USER_BONUS = 2000
REFERRAL_BONUS = 1000
TASK_REWARD = 200
DAILY_TASK_LIMIT = 100
MINING_REWARD = 500
MINING_COOLDOWN_HOURS = 8

# --- ржзрж╛ржк рзк: рж╕рж╣рж╛ржпрж╝ржХ ржлрж╛ржВрж╢ржи ---
def generate_referral_code(): return str(uuid.uuid4())[:8]

def update_rix_balance(user_id, amount_to_add):
    try:
        user_data_res = supabase.table('users').select('rix_balance').eq('user_id', user_id).limit(1).execute()
        if user_data_res.data:
            current_balance = user_data_res.data[0].get('rix_balance', 0)
            new_balance = current_balance + amount_to_add
            supabase.table('users').update({'rix_balance': new_balance}).eq('user_id', user_id).execute()
    except Exception as e: print(f"Balance update error for {user_id}: {e}")

def get_main_menu_keyboard(is_new_user=False):
    mini_app_url = f"{RENDER_URL}/app" if RENDER_URL else ""
    keyboard = [[InlineKeyboardButton("ЁЯТО ржУржкрзЗржи RiX Earn ржЕрзНржпрж╛ржк", web_app={'url': mini_app_url})]]
    if is_new_user:
        keyboard.append([InlineKeyboardButton("ЁЯОБ ржЗржиржкрзБржЯ рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржб", callback_data="enter_referral_code")])
    return InlineKeyboardMarkup(keyboard)

# --- ржзрж╛ржк рзл: ржорзВрж▓ рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ рж▓ржЬрж┐ржХ (ржмржЯрзЗрж░ ржЬржирзНржп) ---
def handle_update(update_data):
    update = Update.de_json(update_data, bot)
    
    # Callback Query (ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ) рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    if update.callback_query:
        query = update.callback_query; chat_id = query.message.chat_id
        if query.data == "enter_referral_code":
            query.answer(); bot.send_message(chat_id=chat_id, text="ЁЯФС ржЖржкржирж╛рж░ ржмржирзНржзрзБрж░ рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржбржЯрж┐ ржПржЦрж╛ржирзЗ ржкрж╛ржарж╛ржи:")
        return

    if not (update.message and update.message.text): return

    user = update.message.from_user; chat_id = update.message.chat_id; text = update.message.text
    
    # /start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
    if text.startswith('/start'):
        try:
            command_parts = text.split(); referrer_id = None
            if len(command_parts) > 1 and len(command_parts[1]) > 5:
                referral_code = command_parts[1]
                referrer_res = supabase.table('users').select('user_id').eq('referral_code', referral_code).limit(1).execute()
                if referrer_res.data: referrer_id = int(referrer_res.data[0]['user_id'])
            
            existing_user = supabase.table('users').select('user_id').eq('user_id', user.id).limit(1).execute()
            
            if not existing_user.data:
                initial_balance = NEW_USER_BONUS
                if referrer_id and referrer_id != user.id:
                    initial_balance += REFERRAL_BONUS
                    update_rix_balance(referrer_id, REFERRAL_BONUS)
                    bot.send_message(chat_id=referrer_id, text=f"ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! {user.first_name} ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐рзЯрзЗржЫрзЗржиред ржЖржкржирж╛рж░рж╛ ржжрзБржЬржирзЗржЗ ржмрзЛржирж╛рж╕ ржкрзЗрзЯрзЗржЫрзЗржи!")
                
                supabase.table('users').insert({'user_id': user.id, 'first_name': user.first_name, 'username': user.username or '', 'referral_code': generate_referral_code(), 'rix_balance': initial_balance, 'referred_by': referrer_id}).execute()
                welcome_message = f"ЁЯОЙ **рж╕рзНржмрж╛ржЧрждржо, {user.first_name}!**\n\nRiX Earn-ржП ржпрзЛржЧ ржжрзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ **{initial_balance} RiX** ржмрзЛржирж╛рж╕ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ!"
                is_new = not bool(referrer_id)
                bot.send_message(chat_id=chat_id, text=welcome_message, reply_markup=get_main_menu_keyboard(is_new_user=is_new), parse_mode=ParseMode.MARKDOWN)
            else:
                welcome_message = f"ЁЯСЛ **ржлрж┐рж░рзЗ ржЖрж╕рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж, {user.first_name}!**"
                bot.send_message(chat_id=chat_id, text=welcome_message, reply_markup=get_main_menu_keyboard(), parse_mode=ParseMode.MARKDOWN)
        except Exception as e: print(f"Error in /start: {e}")
        return

    # рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржб ржЗржиржкрзБржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
    try:
        user_profile_res = supabase.table('users').select('referred_by').eq('user_id', user.id).limit(1).execute()
        if user_profile_res.data and user_profile_res.data[0].get('referred_by') is not None:
            bot.send_message(chat_id=chat_id, text="ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржПржХржЯрж┐ рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЗржиред"); return
        
        referral_code = text.strip()
        referrer_response = supabase.table('users').select('user_id, first_name').eq('referral_code', referral_code).limit(1).execute()
        if referrer_response.data:
            referrer = referrer_response.data[0]; referrer_id = referrer['user_id']
            if referrer_id == user.id: bot.send_message(chat_id=chat_id, text="ржЖржкржирж┐ ржирж┐ржЬрзЗрж░ рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи ржирж╛ред"); return
            update_rix_balance(user.id, REFERRAL_BONUS); update_rix_balance(referrer_id, REFERRAL_BONUS)
            supabase.table('users').update({'referred_by': referrer_id}).eq('user_id', user.id).execute()
            bot.send_message(chat_id=chat_id, text=f"рж╕ржлрж▓! ржЖржкржирж┐ {referrer['first_name']}-ржПрж░ рж░рзЗржлрж╛рж░рзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐рзЯрзЗржЫрзЗржи ржПржмржВ {REFERRAL_BONUS} RiX ржмрзЛржирж╛рж╕ ржкрзЗрзЯрзЗржЫрзЗржиред")
            bot.send_message(chat_id=referrer_id, text=f"ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! {user.first_name} ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЗред ржЖржкржирж╛рж░рж╛ ржжрзБржЬржирзЗржЗ ржмрзЛржирж╛рж╕ ржкрзЗрзЯрзЗржЫрзЗржи!")
        else:
            bot.send_message(chat_id=chat_id, text="ржжрзБржГржЦрж┐ржд, ржПржЗ рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржбржЯрж┐ рж╕ржарж┐ржХ ржиржпрж╝ред")
    except Exception as e: print(f"Error processing referral code: {e}")

# --- ржзрж╛ржк рзм: ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржПржмржВ API ржПржирзНржбржкржпрж╝рзЗржирзНржЯрж╕ ---
@app.route('/app')
def mini_app_handler():
    return send_from_directory('frontend', 'index.html')

@app.route('/api/user_data', methods=['GET'])
def get_user_data():
    # ... (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд) ...
    pass
# ... (ржЖржкржирж╛рж░ ржЕржирзНржпрж╛ржирзНржп рж╕ржм API ржПржирзНржбржкржпрж╝рзЗржирзНржЯ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд ржерж╛ржХржмрзЗ) ...

# --- Webhook рж╕рзЗржЯржЖржк ржПржмржВ ржЕрзНржпрж╛ржк рж░рж╛ржи ---
@app.route('/', methods=['POST'])
def webhook_handler():
    handle_update(request.json)
    return Response(status=200)

def set_webhook():
    # рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХржмрж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рж╛рж░ ржЬржирзНржп
    if RENDER_URL:
        webhook_url = f"{RENDER_URL}/"
        is_set = bot.set_webhook(url=webhook_url, allowed_updates=['message', 'callback_query'])
        if is_set:
            print(f"Webhook set successfully to {webhook_url}")
        else:
            print("Webhook setup failed.")

if __name__ == "__main__":
    # Render.com ржПржЗ ржмрзНрж▓ржХржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржирж╛, ржПржЯрж┐ Gunicorn ржерзЗржХрзЗ ржЕрзНржпрж╛ржк ржЪрж╛рж▓рж╛ржпрж╝ред
    # ржХрж┐ржирзНрждрзБ ржкрзНрж░ржержоржмрж╛рж░ Webhook рж╕рзЗржЯ ржХрж░рж╛рж░ ржЬржирзНржп ржПржЯрж┐ ржХрж╛рж░рзНржпржХрж░ рж╣рждрзЗ ржкрж╛рж░рзЗред
    set_webhook()
    app.run(host='0.0.0.0', port=PORT)
